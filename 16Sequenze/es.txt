ESERCIZI SULLE SEQUENZE
=======================

Nei seguenti esercizi, nat la sequenza infinita nat dei numeri naturali 0,1,2,...

 let nat =  Seq.initInfinite (fun x -> x) ;;


_____________________________________________________________


MAP
===

Definire la funzione ricorsiva

    map : ('a -> 'b) -> seq<'a> -> seq<'b>

che produce la map di una sequenza infinita.

Applicando map a nat, generare la sequenza infinita dei quadrati 
dei numeri naturali (0, 1, 4, ...) 
Verificare che la lista dei primi 15 elementi di squares e':

[0; 1; 4; 9; 16; 25; 36; 49; 64; 81; 100; 121; 144; 169; 196; 225; 256; 289; 324; 361]


Cosa succede se map e' applicata a una sequenza finita?

Modificare la definizione di map in modo che funzioni correttamente 
anche su sequenze finite.

______________________________________________________________

FILTER
======

Definire la funzione ricorsiva

 filter : ('a -> bool) -> seq<'a> -> seq<'a>

che, dato un predicato pred : 'a -> bool e una sequenza infinita sq,
genera la sequenza degli elementi di sq che verificano sq.

Applicando filter a nat, generare la sequenza dei multipli di 3 (0, 3, 6, ...)

Verificare che la lista dei primi 20 elementi della sequenza generata e'

 [0; 3; 6; 9; 12; 15; 18; 21; 24; 27; 30; 33; 36; 39; 42; 45; 48; 51; 54; 57]

______________________________________________________________


SEQUENZA DI FIBONACCI
=====================

Definire la sequenza infinita

   fibSeq : seq<int> 

dei numeri di Fibonacci.

Per generare fibSeq,  definire la funzione ricorsiva

   fibFrom : : int -> int -> seq<int>

che, dati due interi a e b, genera la sequenza di Fibonacci i cui primi due numeri sono a e b,
ossia la sequenza  x0, x1, x2, ... tale che

    x0  =  a
    x1  =  b
    xn  =  x(n-2) + x(n-1) per ogni  n >= 2
 
Definire la funzione

  fib : int -> int

che, dato n >= 0, calcola il numero di Fibonacci di indice n.

Esempi:

fib 0 ;;   // 1
fib 1 ;;   // 1
fib 2 ;;   // 2
fib 3 ;;   // 3
fib 4 ;;   // 5
fib 10 ;;  // 89

Poiche' i numeri di Fibonacci crescono esponenzialmente,
conviene rappresentarli usando il tipo uint64 invece di int.


______________________________________________________________________________


SEQUENZA DELLE SOMME DI UNA SEQUENZA
====================================

Definire la funzione
   
   sumSeq : seq<int> -> seq<int>

che, data una sequenza infinita di interi,

  n0, n1, n2, n3, .....

costruisce la sequenza delle somme 

 n0, n0 + n1, n0 + n1 + n2, n0 + n1 + n2 + n3, ....


Verificare che la lista dei primi 15 elementi della sequenza

    sumSeq nat 

e'

 [0; 1; 3; 6; 10; 15; 21; 28; 36; 45; 55; 66; 78; 91; 105]


Suggerimento
^^^^^^^^^^^^

Osservare che la sequenza

   
     n0 + n1, n0 + n1 + n2, n0 + n1 + n2 + n3, ...
  
e' uguale alla sequenza delle somme (sumSeq) della sequenza

     n0 + n1, n2,  n3, ...



______________________________________________________________________________



ELENCO DEI FILE IN UNA DIRECTORY
=================================

Definite la funzione

  allFiles : string -> seq<string>

che dato il path di una directory (una stringa) costruisce la sequenza
dei file contenuti nella directory specificata e, ricorsivamente, 
in tutte le sue sottodirectory.

Usare le seguenti funzioni di F#:

* Directory.GetFiles  : string -> string [] 
 
  Restituisce un array con i nomi dei file nella directory specificata.
  
* Directory.GetDirectories : string -> string [] 
 
  Restituisce un array con i nomi delle directory nella directory specificata.
 
Per usare queste funzioni occorre aprire System.IO:

  open System.IO ;;

Notare che gli array possono essere visti come sequenze,
quindi e' possible applicare ad essi le funzioni definite sulle sequenze.

Occorre inoltre usare la funzione Seq.collect.

----

Esempio:

let courseFPDir = "/home/fiorenti/FP" // definizione di un path 
let fileSeq = allFiles courseFPDir

Seq.nth 310 fileSeq ;;  // file in posizione 310 in fileSeq
// val it : string = "/home/fiorenti/FP/2013/Lez1/esempio.fs"


Calcolare il numero dei file nella sequenza ottenuta.

___________________________________________________________________________
     

CRIVELLO DI ERATOSTENE
======================

Scopo dell'esercizio e'  definire la sequenza infinita dei numeri primi
implementando il crivello di Eratostene.

Si noti che il crivello di Eratostene lavora su insiemi infiniti.
In genere nelle implementazioni occorre fissare un limite superiore
sui numeri che si vogliono considerare.
Usando le sequenze, si puo' lavorare direttamente sugli  insiemi infiniti.


i) Definire la funzione 

    sift : int -> seq<int> -> seq<int>
  
che, dati un intero a > 0 e  e una sequenza infinita di interi sq,
restituisce la sequenza di interi  ottenuta eliminando da sq i multipli di a.

Ad esempio, sia nat la sequenza infinita dei numeri naturali 0, 1, 2, 3, ...

Definiamo: 

let sq1 = sift 2 nat ;;
// sq1 : seq<int> = [1; 3; 5; 7; ... ]  (sequenza infinita dei numeri dispari)

let sq2 = sift 3 nat ;;
// sq2 : seq<int> = seq [1; 2; 4; 5; 7; 8; 10; ... ]  

Verificare che:

- La lista dei primi 10 elementi di sq1 e'

    [1; 3; 5; 7; 9; 11; 13; 15; 17; 19]

- La lista dei primi 15 elementi di sq2 e'

    [1; 2; 4; 5; 7; 8; 10; 11; 13; 14; 16; 17; 19; 20; 22]


ii) Definire la funzione ricorsiva

    sieve : seq<int> -> seq<int>

che applica a una sequenza infinita di interi  il crivello di Eratostene.
Piu' precisamente, data una sequenza sq di interi, vanno eseguiti i seguenti passi:

1. Seleziona il primo elemento x0 di sq 
2. Cancella da sq i multipli propri di x0
   (ossia, x0 rimane in sq e sono cancellati da sq i multipli di x0 maggiori di x0) 
3. Ripeti il processo da 1 partendo dalla sequenza ottenuta al passo 2

Al passo 2 va usata la funzione sift.
Notare che il processo descritto e' infinito.

---

Sia nat2 la sequenza infinita degli interi n >= 2.

La sequenza infinita primes dei numeri primi puo' essere costruita applicando sieve a nat2.

Verificare che la lista dei primi 10 numeri primi e'
 
 [2; 3; 5; 7; 11; 13; 17; 19; 23; 29]

iii) L'implementazione fornita del Crivello di Eratostene e' poco efficiente,
in quanto le sequenza usate vengono continuamente rigenerate.

Per migliorare l'efficienza si puo' usare il meccanismo di caching, 
che evita di calcolare piu' di una volta lo stesso elemento di una sequenza.

Si puo' procedere come segue:

a) Si definisce la versione cached della funzione sift

let siftC a sq = Seq.cache  ( sift a sq )

b) Si definisce la funzione sieveC, analoga a sieve, in cui pero' vengono usate le funzioni siftC e sieveC.

c) Si definisce la sequenza cached dei numeri primi usando sieveC:

let primesC = Seq.cache (sieveC nat2)

Verificare che l'implementazione con caching e' piu' efficiente
(provare a generare una lista di numeri primi grande usando le due versioni).


