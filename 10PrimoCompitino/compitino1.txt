
Esercizi assegnati il primo compitino AA 2012/13


////////////////////////////////////////////////////////////////////////////////


ESERCIZIO 1
===========

Definire la funzione

   split : 'a list -> 'a list * 'a list

che, data una lista l contenente gli elementi x0, x1, x2, x3, ... restituisce la coppia di liste

   (l0, l1)

dove:

- l0 e' la lista degli elementi di l in posizione pari, ossia x0, x2, x4, ...
- l1 e' la lista degli elementi di l in posizione dispari, ossia  x1, x3, x5, ...

Esempi:

let s1 = split ( [] : int list )  
//  s1 = ([], [])

let s2 = split ['a']  
//  s2 = (['a'], [])

let s3 = split ["anna" ; "barbara" ]      
//  s3 = (["anna"], ["barbara"])

let s4 = split ["ape" ; "bue" ; "cane"]  
//  s4 = (["ape"; "cane"], ["bue"])

let s5 = split [ 0 .. 10 ]    
//  s5 = ([0; 2; 4; 6; 8; 10], [1; 3; 5; 7; 9])

let s6 = split [ 0 .. 11 ]    
//  s6 = ([0; 2; 4; 6; 8; 10], [1; 3; 5; 7; 9; 11])



///////////////////////////////////////////////////////////////

ESERCIZIO 2
============

Definire una funzione

   takeWhile :  ('a -> bool) -> 'a list -> 'a list

che, applicata a un predicato p : ('a -> bool) e a una lista ls : 'a list, 
genera il prefisso piu' lungo di tutti gli elementi di ls che soddifano p.

In altri termini,  se ls contiene gli elementi x0, x1, x2, ... 
va restituita la piu' lunga sottolista di ls che inizia da x0 e i cui elementi
soddisfano il predicato p (notare che il prefisso puo' essere la lista vuota).

Esempi:

let p1 = takeWhile (fun x -> x < 10) [ 1 .. 100]
// p1 = [1; 2; 3; 4; 5; 6; 7; 8; 9]

let p2 = takeWhile (fun x -> x < 0) [ 1 .. 100]
// p2 = []
    
let p3 =  takeWhile (fun x -> x % 2 = 0) [2;4;5;6];;
// p3 = [2; 4]

let p4 = takeWhile (fun x -> x % 2 = 1) [2;4;5;6];;
// p4 = []



////////////////////////////////////////////////////////////////////////

ESERCIZIO 3
===========

i. Definire una funzione

 safeDiv : int option -> int option -> int option

che prende due opzioni (valori di tipo int option)  e restituisce il risultato solo se ambo gli
argomenti sono Some n e il divisore e' diverso da zero

Esempi:

let d1 = safeDiv (Some 3) (Some 4);;
// d1 = Some 0

let d2 = safeDiv (Some 3) (Some 0);;
// d2 = None

let d3 = safeDiv (Some 3) None;;
// d3 = None

ii. Definire una funzione polimorfa

optMapBinary   : ('a -> 'b -> 'c) -> 'a option -> 'b option -> 'c option

che accetta una funzione binaria e due argomenti opzione e  
applica la funzione agli argomenti se entrambi sono definiti, 
altrimenti restituisce None.

Esempi:

let x1 =  optMapBinary (fun a -> fun b ->  2*(a + b) ) (Some 2) (Some 3)
// x1 = Some 10

let x2 =  optMapBinary (fun a -> fun b ->  2*(a + b) )  None (Some -2)
// x2 = None

let x3 =  optMapBinary (fun a -> fun b ->  2*(a + b) )  (Some 10) None
// x3 = None


iii. Usare questa funzione per definire le  versioni "Safe" di addizione e
moltiplicazione

   optPlus :  int option -> int option -> int option   // addizione safe
   optTimes : int option -> int option -> int option   // moltiplicazione safe


Esempi:

let y1 = optPlus (Some 3) (Some 1);;
// y1 = Some 4

let y2 = optPlus (Some 3) None
// y2  = None

let y3 = optTimes (Some 2) (Some -5)
// y3 = Some -10

let y4 =  optTimes  (safeDiv (Some 1) (Some 0)) (Some 1)
// y4 = None


////////////////////////////////////////////////////////////////////////


ESERCIZIO 4
===========

Una formula logica e' in Negation Normal Form (NNF) se ogni negazione
appare solo in fronte a proposizioni atomiche. Per esempio:

 (¬p∨q∨r) ∧ ((p∧¬q)∨r) ∧ (¬r) e' in NNF

 (¬p∨q∨r) ∧ ¬(¬q∨r) ∧ (¬r)  NON e' in NNF perche' vi è una negazione in fronte a una disgiunzione.

i) Definire il tipo Form che permetta di rappresentare una formula F definita dalla seguente grammatica
 
F := P k | Not F | And(F1,F2) | Or(F1,F2)

dove P k rappresenta la variabile proposizionale pk (k>= 0).

Esempi di formule:

 P 5 ,       And(P 1, P 1)    Not(And(P 1, Not(Not (P 2))))


ii) Definire la funzione

    nnf : Form -> Form

che converte una formula arbitraria nella sua NNF, 
applicando ricorsivamente le seguente trasformazioni (leggi di de Morgan):

	 Not(Not(F)) --> F 

	 Not(Or(F1,F2)) --> And(Not F1, Not F2)

	 Not(And(F1,F2)) --> Or(Not F1, Not F2)

Esempi:


let f1 = nnf (And( P 1, Not( Not (P 2))))
// f1 = And (P 1,P 2)

let f2 = nnf (Not( And( P 1, Not( Not (P 2) ))))
// f2 =  Or (Not (P 1),Not (P 2))

let f3 = nnf (Not(And(P 1, Not(Not (P 2)))));;
// f3  = Or (Not (P 1), Not (P 2))

let f4 = nnf (Or(Not (Not (P 1 )), And (P 2, P 3 )))
// f4 =  Or (P 1, And (P 2,P 3))

let f5 = nnf (Not(And(P 1, Not(Or(P 2, P 3)))))
// f5 =  Or (Not (P 1),Or (P 2,P 3))

let f6 = nnf (And(P 1, Not (P 2)));;
// f6 = And (P 1,Not (P 2))

let f7= nnf  ( And ( P 1, Not ( Or ( P 2 ,Not (And  ( P 3 , Not ( P 4 ))))))) 
// f7 = And (P 1,And (Not (P 2),And (P 3,Not (P 4))))

